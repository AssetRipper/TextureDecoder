// Auto-generated code. Do not modify manually.

using AssetRipper.TextureDecoder.Rgb.Formats;

namespace AssetRipper.TextureDecoder.Tests.Formats.Generic;
[TestFixture(TypeArgs = new Type[] { typeof(sbyte), typeof(sbyte) })]
[TestFixture(TypeArgs = new Type[] { typeof(sbyte), typeof(byte) })]
[TestFixture(TypeArgs = new Type[] { typeof(sbyte), typeof(short) })]
[TestFixture(TypeArgs = new Type[] { typeof(sbyte), typeof(ushort) })]
[TestFixture(TypeArgs = new Type[] { typeof(sbyte), typeof(int) })]
[TestFixture(TypeArgs = new Type[] { typeof(sbyte), typeof(uint) })]
[TestFixture(TypeArgs = new Type[] { typeof(sbyte), typeof(long) })]
[TestFixture(TypeArgs = new Type[] { typeof(sbyte), typeof(ulong) })]
[TestFixture(TypeArgs = new Type[] { typeof(sbyte), typeof(Int128) })]
[TestFixture(TypeArgs = new Type[] { typeof(sbyte), typeof(UInt128) })]
[TestFixture(TypeArgs = new Type[] { typeof(byte), typeof(sbyte) })]
[TestFixture(TypeArgs = new Type[] { typeof(byte), typeof(byte) })]
[TestFixture(TypeArgs = new Type[] { typeof(byte), typeof(short) })]
[TestFixture(TypeArgs = new Type[] { typeof(byte), typeof(ushort) })]
[TestFixture(TypeArgs = new Type[] { typeof(byte), typeof(int) })]
[TestFixture(TypeArgs = new Type[] { typeof(byte), typeof(uint) })]
[TestFixture(TypeArgs = new Type[] { typeof(byte), typeof(long) })]
[TestFixture(TypeArgs = new Type[] { typeof(byte), typeof(ulong) })]
[TestFixture(TypeArgs = new Type[] { typeof(byte), typeof(Int128) })]
[TestFixture(TypeArgs = new Type[] { typeof(byte), typeof(UInt128) })]
[TestFixture(TypeArgs = new Type[] { typeof(short), typeof(short) })]
[TestFixture(TypeArgs = new Type[] { typeof(short), typeof(ushort) })]
[TestFixture(TypeArgs = new Type[] { typeof(short), typeof(int) })]
[TestFixture(TypeArgs = new Type[] { typeof(short), typeof(uint) })]
[TestFixture(TypeArgs = new Type[] { typeof(short), typeof(long) })]
[TestFixture(TypeArgs = new Type[] { typeof(short), typeof(ulong) })]
[TestFixture(TypeArgs = new Type[] { typeof(short), typeof(Int128) })]
[TestFixture(TypeArgs = new Type[] { typeof(short), typeof(UInt128) })]
[TestFixture(TypeArgs = new Type[] { typeof(ushort), typeof(short) })]
[TestFixture(TypeArgs = new Type[] { typeof(ushort), typeof(ushort) })]
[TestFixture(TypeArgs = new Type[] { typeof(ushort), typeof(int) })]
[TestFixture(TypeArgs = new Type[] { typeof(ushort), typeof(uint) })]
[TestFixture(TypeArgs = new Type[] { typeof(ushort), typeof(long) })]
[TestFixture(TypeArgs = new Type[] { typeof(ushort), typeof(ulong) })]
[TestFixture(TypeArgs = new Type[] { typeof(ushort), typeof(Int128) })]
[TestFixture(TypeArgs = new Type[] { typeof(ushort), typeof(UInt128) })]
[TestFixture(TypeArgs = new Type[] { typeof(int), typeof(int) })]
[TestFixture(TypeArgs = new Type[] { typeof(int), typeof(uint) })]
[TestFixture(TypeArgs = new Type[] { typeof(int), typeof(long) })]
[TestFixture(TypeArgs = new Type[] { typeof(int), typeof(ulong) })]
[TestFixture(TypeArgs = new Type[] { typeof(int), typeof(Int128) })]
[TestFixture(TypeArgs = new Type[] { typeof(int), typeof(UInt128) })]
[TestFixture(TypeArgs = new Type[] { typeof(uint), typeof(int) })]
[TestFixture(TypeArgs = new Type[] { typeof(uint), typeof(uint) })]
[TestFixture(TypeArgs = new Type[] { typeof(uint), typeof(long) })]
[TestFixture(TypeArgs = new Type[] { typeof(uint), typeof(ulong) })]
[TestFixture(TypeArgs = new Type[] { typeof(uint), typeof(Int128) })]
[TestFixture(TypeArgs = new Type[] { typeof(uint), typeof(UInt128) })]
[TestFixture(TypeArgs = new Type[] { typeof(long), typeof(long) })]
[TestFixture(TypeArgs = new Type[] { typeof(long), typeof(ulong) })]
[TestFixture(TypeArgs = new Type[] { typeof(long), typeof(Int128) })]
[TestFixture(TypeArgs = new Type[] { typeof(long), typeof(UInt128) })]
[TestFixture(TypeArgs = new Type[] { typeof(ulong), typeof(long) })]
[TestFixture(TypeArgs = new Type[] { typeof(ulong), typeof(ulong) })]
[TestFixture(TypeArgs = new Type[] { typeof(ulong), typeof(Int128) })]
[TestFixture(TypeArgs = new Type[] { typeof(ulong), typeof(UInt128) })]
[TestFixture(TypeArgs = new Type[] { typeof(Int128), typeof(Int128) })]
[TestFixture(TypeArgs = new Type[] { typeof(Int128), typeof(UInt128) })]
[TestFixture(TypeArgs = new Type[] { typeof(UInt128), typeof(Int128) })]
[TestFixture(TypeArgs = new Type[] { typeof(UInt128), typeof(UInt128) })]
[TestFixture(TypeArgs = new Type[] { typeof(Half), typeof(Half) })]
[TestFixture(TypeArgs = new Type[] { typeof(Half), typeof(float) })]
[TestFixture(TypeArgs = new Type[] { typeof(Half), typeof(double) })]
[TestFixture(TypeArgs = new Type[] { typeof(float), typeof(float) })]
[TestFixture(TypeArgs = new Type[] { typeof(float), typeof(double) })]
[TestFixture(TypeArgs = new Type[] { typeof(double), typeof(double) })]
partial class LosslessColorTests<T1, T2>
{
}
